# Application Configuration Values
#
# This file contains common configuration values for all applications.
# Use this as a template to customize deployments without editing manifests directly.
#
# Usage:
# 1. Copy this file: cp values.yaml my-values.yaml
# 2. Edit my-values.yaml with your values
# 3. Apply using Kustomize or Helm (if converted)

---
# Global Configuration
global:
  # Namespace for all applications
  namespace: apps
  
  # Environment (development, staging, production)
  environment: production
  
  # Image pull policy
  imagePullPolicy: Always
  
  # Labels applied to all resources
  commonLabels:
    managed-by: argocd
    environment: production

---
# Task Management Application
taskManagement:
  enabled: true
  replicas: 3
  image:
    repository: temitayocharles/task-management-app
    tag: latest
  service:
    port: 3000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  ingress:
    enabled: true
    host: task-management.local
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"

---
# K8s Deploy Test Application
k8sDeployTest:
  enabled: true
  replicas: 2
  image:
    repository: temitayocharles/k8s-deploy-test
    tag: latest
  service:
    port: 8080
  resources:
    requests:
      memory: "64Mi"
      cpu: "50m"
    limits:
      memory: "128Mi"
      cpu: "100m"
  ingress:
    enabled: true
    host: k8s-test.local
  env:
    - name: APP_ENV
      value: "production"

---
# TCA InfraForge Backend
tcaInfraforgeBackend:
  enabled: true
  replicas: 3
  image:
    repository: temitayocharles/tca-infraforge-backend
    tag: latest
  service:
    port: 3000
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "400m"
  ingress:
    enabled: true
    host: tca-infraforge.local
    path: /api
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"
    - name: API_PREFIX
      value: "/api"

---
# TCA InfraForge Frontend
tcaInfraforgeFrontend:
  enabled: true
  replicas: 3
  image:
    repository: temitayocharles/tca-infraforge-frontend
    tag: latest
  service:
    port: 80
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  ingress:
    enabled: true
    host: tca-infraforge.local
    path: /
  env:
    - name: BACKEND_URL
      value: "http://tca-infraforge-backend:3000"
    - name: API_URL
      value: "/api"

---
# Personal Vault
personalVault:
  enabled: true
  replicas: 2
  image:
    repository: temitayocharles/personal-vault
    tag: latest
  service:
    port: 3000
  resources:
    requests:
      memory: "128Mi"
      cpu: "100m"
    limits:
      memory: "256Mi"
      cpu: "200m"
  ingress:
    enabled: true
    host: vault.local
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"
  # Secrets (use sealed-secrets or external secret management)
  secrets:
    vaultToken: ""  # Replace with actual token or use sealed-secrets
    encryptionKey: ""  # Replace with actual key
    databaseUrl: ""  # Replace with actual database URL

---
# Ecommerce Application
ecommerceApp:
  enabled: true
  replicas: 3
  image:
    repository: temitayocharles/ecommerce-app
    tag: latest
  service:
    port: 3000
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "400m"
  ingress:
    enabled: true
    host: ecommerce.local
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "3000"

---
# Resource Optimization Profiles
#
# Copy these profiles to adjust resource usage for your system

# Profile: Development (minimal resources)
# Total: 8 pods, ~400m CPU, ~512Mi memory
development:
  taskManagement:
    replicas: 1
    resources:
      requests: { memory: "64Mi", cpu: "50m" }
      limits: { memory: "128Mi", cpu: "100m" }
  k8sDeployTest:
    replicas: 1
    resources:
      requests: { memory: "32Mi", cpu: "25m" }
      limits: { memory: "64Mi", cpu: "50m" }
  tcaInfraforgeBackend:
    replicas: 1
    resources:
      requests: { memory: "128Mi", cpu: "100m" }
      limits: { memory: "256Mi", cpu: "200m" }
  tcaInfraforgeFrontend:
    replicas: 1
    resources:
      requests: { memory: "64Mi", cpu: "50m" }
      limits: { memory: "128Mi", cpu: "100m" }
  personalVault:
    replicas: 1
    resources:
      requests: { memory: "64Mi", cpu: "50m" }
      limits: { memory: "128Mi", cpu: "100m" }
  ecommerceApp:
    replicas: 1
    resources:
      requests: { memory: "128Mi", cpu: "100m" }
      limits: { memory: "256Mi", cpu: "200m" }

# Profile: Production-Lite (balanced for 3GB systems)
# Total: 10 pods, ~800m CPU, ~1280Mi memory
productionLite:
  taskManagement:
    replicas: 2
    resources:
      requests: { memory: "96Mi", cpu: "75m" }
      limits: { memory: "192Mi", cpu: "150m" }
  k8sDeployTest:
    replicas: 1
    resources:
      requests: { memory: "48Mi", cpu: "38m" }
      limits: { memory: "96Mi", cpu: "75m" }
  tcaInfraforgeBackend:
    replicas: 2
    resources:
      requests: { memory: "192Mi", cpu: "150m" }
      limits: { memory: "384Mi", cpu: "300m" }
  tcaInfraforgeFrontend:
    replicas: 2
    resources:
      requests: { memory: "96Mi", cpu: "75m" }
      limits: { memory: "192Mi", cpu: "150m" }
  personalVault:
    replicas: 1
    resources:
      requests: { memory: "96Mi", cpu: "75m" }
      limits: { memory: "192Mi", cpu: "150m" }
  ecommerceApp:
    replicas: 2
    resources:
      requests: { memory: "192Mi", cpu: "150m" }
      limits: { memory: "384Mi", cpu: "300m" }

# Profile: Production (full resources - requires 6GB+ memory)
# Total: 16 pods, ~2100m CPU, ~2688Mi memory
production:
  # Use the default values defined above

---
# Ingress Configuration
ingress:
  # Ingress class to use
  className: nginx
  
  # Annotations for all ingresses
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/rewrite-target: /
  
  # TLS configuration (optional)
  tls:
    enabled: false
    # secretName: tls-secret
    # hosts:
    #   - task-management.example.com
    #   - vault.example.com

---
# Monitoring Configuration
monitoring:
  # Enable Prometheus scraping
  prometheus:
    enabled: true
    port: 9090
    path: /metrics
    scrapeInterval: 30s
  
  # Enable Grafana dashboards
  grafana:
    enabled: true
    dashboardIds:
      - 315  # Kubernetes cluster dashboard

---
# ArgoCD Configuration
argocd:
  # Auto-sync settings
  autoSync:
    enabled: true
    prune: true
    selfHeal: true
  
  # Sync retry settings
  retry:
    limit: 5
    backoff:
      duration: 5s
      factor: 2
      maxDuration: 3m
  
  # Repository URL (MUST BE UPDATED)
  repoURL: "https://github.com/YOUR-USERNAME/YOUR-REPO.git"
  targetRevision: main
  
  # Sync wave order
  syncWaves:
    namespaces: 0
    taskManagement: 2
    k8sDeployTest: 3
    tcaInfraforgeBackend: 4
    tcaInfraforgeFrontend: 5
    personalVault: 6
    ecommerceApp: 7

---
# Security Configuration
security:
  # Pod security context
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    fsGroup: 1000
  
  # Container security context
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
    capabilities:
      drop:
        - ALL

---
# Health Check Configuration
healthChecks:
  liveness:
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readiness:
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

---
# Quick Reference: Common Customizations

# 1. Reduce resources for 3GB system:
#    Copy "productionLite" profile values to main application sections

# 2. Change image tags from "latest" to specific versions:
#    image:
#      tag: "v1.2.3"

# 3. Disable specific applications:
#    enabled: false

# 4. Change replica counts:
#    replicas: 1  # or 2, 5, etc.

# 5. Update domain names:
#    ingress:
#      host: myapp.example.com

# 6. Add custom environment variables:
#    env:
#      - name: MY_VARIABLE
#        value: "my-value"

# 7. Configure secrets externally:
#    Use sealed-secrets or external secret management
#    Don't commit plain text secrets to Git!
